[{"uri":"/posts/hugo_usage","tags":[],"content":"Grammar Usagewarning    {{}}This is a warning    {{}} 折叠 /Read More 引用     >This is a reference    >       def a():    >           print(b)    > 表格 | head1 | head2 || --- | --- || key1 | v1 || key2 | v2 |Commandgulp serve : liveload servergulp build: generate public files to /docsgulp lunr: generate index file for search","title":"Hugo Usage","oriTitle":"Hugo Usage"},{"uri":"/posts/merge_sort","tags":["sort","python","merge sort"],"content":"id         : 464url        : https://www.lintcode.com/problem/sort-integers-ii/descriptiontitle      : Merge Sortdifficulty : Mediumtopic      : sort 要点 复杂度          时间 复杂度          空间 复杂度          稳    定    性          平均 情况          最好 情况          最 坏 情况         O(nlog2n)        O(nlog2n)        O(nlog2n)        O(n)         稳定 解法 递归 class Solution:    \"\"\"    @param A: an integer array    @return: nothing    \"\"\"    def sortIntegers2(self, A):        if not A or len(A) == 1:            return A        self.mergeSort(A, 0, len(A) - 1)        return A    def mergeSort(self, A, low, high):        if low >= high:            return        mid = low + (high - low) // 2        self.mergeSort(A, low, mid)        self.mergeSort(A, mid+1, high)        self.mergeArray(A, low, mid, high)    def mergeArray(self, A, low, mid, high):        tmpArrary = A[low:high+1]        i, j, k = 0, mid-low+1, low        while i  mid-low+1:            while j  high-low:            while i  mid-low+1:            while j  high-low:            while i <= mid - low:                A[k] = tmpArrary[i]                i += 1                k += 1`","title":" 归并 排序 的 递归 与非 递归 实现 ","oriTitle":"归并排序的递归与非递归实现"}]